import pandas as pd
import joblib
import pickle

from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
# from sklearn import sklearn.cross_validation 

import numpy as np

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import GradientBoostingClassifier

malData = pd.read_csv("MalwareData.csv", sep="|")

legit = malData[0:41323].drop(["legitimate"], axis=1)
mal = malData[41323::].drop(["legitimate"], axis=1)

print("The shape of the legit dataset is :%s samples, %s features"%(legit.shape[0], legit.shape[1]))
print("The shape of the malware dataset is :%s samples, %s features"%(mal.shape[0], mal.shape[1]))

data_in = malData.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = malData['legitimate'].values
extratrees = ExtraTreesClassifier().fit(data_in, labels)
select = SelectFromModel(extratrees, prefit=True)
data_in_new = select.transform(data_in)
print(data_in.shape, data_in_new.shape)

features = data_in_new.shape[1]
importances = extratrees.feature_importances_
indices = np.argsort(importances)[::-1]

features1 = []

for f in range(features):
    print("%d"%(f+1), malData.columns[2+indices[f]], importances[indices[f]])

for f in sorted(np.argsort(importances)[::-1][:features]):
    features1.append(malData.columns[2 + f])

legit_train, legit_test, mal_train, mal_test = train_test_split(data_in_new, labels, test_size=0.2)
classif = RandomForestClassifier(n_estimators=50)

classif.fit(legit_train, mal_train)

print("The score of the algorithm: ", classif.score(legit_test, mal_test)*100)

result = classif.predict(legit_test)
conf_mat = confusion_matrix(mal_test, result)
print(conf_mat)
print("False positives: ", conf_mat[0][1]/sum(conf_mat[0])*100)
print("False negatives: ", conf_mat[1][0]/sum(conf_mat[1])*100)

grad_boost = GradientBoostingClassifier(n_estimators=50)
grad_boost.fit(legit_train, mal_train)

print("The score of the Gradient Boosting Classifier is: ", grad_boost.score(legit_test, mal_test)*100)

print("Saving algo and feature list in classifier directory")
joblib.dump(classif, 'classifier/classifier.pkl')
open('classifier/features.pkl', 'wb').write(pickle.dumps(features1))
print('saved')

# print(features1)

# print(legit_test[:10])
# print(classif.predict('memtest.exe'))